openapi: 3.0.1
info:
  title: Chatic app
  version: 1.0.0
servers:
  - url: http://labvm-42-22.itmo-lab.cosm-lab.science:8080
    description: Common gateway
paths:
  /login:
    post:
      summary: Login to get your token
      tags:
        - person-controller
      operationId: login
      security:
        - basicAuth : []
      responses:
        "200":
          description: OK
          headers:
            Authorization:
              schema:
                type: string
                format: jwt
                description: token
  /persons:
    post:
      summary: Create new user (admin)
      tags:
        - person-controller
      operationId: addPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonRequestDtoAdd'
        required: true
      responses:
        "201":
          description: Created
  /persons/byusername/{username}:
    get:
      summary: Get user info by username
      tags:
        - person-controller
      operationId: getPersonUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json':
              schema:
                $ref: '#/components/schemas/PersonResponseDto'
  /persons/byid/{userId}:
    get:
      summary: Get user info by id
      tags:
        - person-controller
      operationId: getPersonId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonResponseDto'
  /persons/{username}:
    delete:
      summary: Delete user (admin and user itself)
      tags:
        - person-controller
      operationId: deletePerson
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK


  /auth/{chatId}/{personId}/{operation}:
    post:
      summary: Authorize user on message operation
      tags:
        - chats-auth-controller
      operationId: authorizeOperation
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: personId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: operation
          in: path
          required: true
          schema:
            type: string
            enum:
              - WRITE
              - REPLY
              - READ
              - MANAGE
      responses:
        "200":
          description: OK

  /personal-chats/{username}:
    get:
      summary: Get info about personal chat with user
      tags:
        - personal-chat-controller
      operationId: getPersonalChat
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalChatResponseDto'
    post:
      summary: Create personal chat with user
      tags:
        - personal-chat-controller
      operationId: addPersonalChat
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalChatResponseDto'
  /personal-chats:
    get:
      summary: Get all personal chats (pageable)
      tags:
        - personal-chat-controller
      operationId: getPersonalChats
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseDtoPersonalChatResponseDto'

  /groups:
    get:
      summary: Get all groups (pageable)
      tags:
        - group-controller
      operationId: getAllGroups
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseDtoGroupResponseDto'
    post:
      summary: Create new group
      description: User will be added to the group with all permissions
      tags:
        - group-controller
      operationId: addGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequestDto'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponseDto'

  /groups/{groupId}/members:
    get:
      summary: Get all group members (pageable)
      description: READ permission
      tags:
        - group-controller
      operationId: getMembers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseDtoGroupMemberResponseDto'
    put:
      summary: Update group member permissions
      description: MANAGE permission
      tags:
        - group-controller
      operationId: updateMember
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMemberRequestDto'
        required: true
      responses:
        "200":
          description: OK
    post:
      summary: Add new member to the group
      description: MANAGE permission
      tags:
        - group-controller
      operationId: addMember
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMemberRequestDto'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberResponseDto'
  /groups/{groupId}/members/{personId}:
    get:
      summary: Get group member info
      description: READ permission
      tags:
        - group-controller
      operationId: getMember
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: personId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberResponseDto'
    delete:
      summary: Delete group member from group
      description: MANAGE permission
      tags:
        - group-controller
      operationId: deleteMember
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: personId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /messages/{messageId}:
    get:
      summary: Get message
      description: READ permission
      tags:
        - message-controller
      operationId: getMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDto'
    put:
      summary: Update your message
      tags:
        - message-controller
      operationId: updateMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequestDto'
        required: true
      responses:
        "200":
          description: OK
    delete:
      summary: Delete your message
      tags:
        - message-controller
      operationId: deleteMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /messages/{messageId}/reactions:
    get:
      summary: Get reactions of message
      description: READ permission
      tags:
        - reaction-controller
      operationId: getReactions
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageResponseDtoReactionResponseDto'
    put:
      summary: Add reaction to message
      description: READ permission
      tags:
        - reaction-controller
      operationId: addReaction
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionRequestDto'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReactionResponseDto'
    delete:
      summary: Delete your reaction
      tags:
        - reaction-controller
      operationId: deleteReaction
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /messages:
    get:
      summary: Get messages of chat
      description: READ permission
      tags:
        - message-controller
      operationId: getMessages
      parameters:
        - name: chatId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageResponseDtoMessageResponseDto'
    post:
      summary: Add message to chat
      description: WRITE permission
      tags:
        - message-controller
      operationId: addMessage
      parameters:
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequestDto'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDto'
  /messages/{messageId}/replies:
    get:
      summary: Get replies to a message
      description: READ permission
      tags:
        - message-controller
      operationId: getReplies
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageResponseDtoMessageResponseDto'
    post:
      summary: Add reply to a message
      description: REPLY permission
      tags:
        - message-controller
      operationId: addReply
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: USERNAME
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequestDto'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDto'

security:
  - jwtAuth : []

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt

  schemas:
    PersonRequestDtoAdd:
      required:
        - authRole
        - password
        - username
      type: object
      properties:
        username:
          maxLength: 20
          minLength: 2
          type: string
        password:
          type: string
          minLength: 1
        bio:
          maxLength: 70
          minLength: 0
          type: string
        authRole:
          type: string
          enum:
            - ADMIN
            - USER
    PersonResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        bio:
          type: string
        deleted:
          type: boolean
    PersonAuthDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        authRole:
          type: string
    PersonalChatResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        person1Id:
          type: string
          format: uuid
        person2Id:
          type: string
          format: uuid
    PageResponseDtoPersonalChatResponseDto:
      type: object
      properties:
        page:
          type: array
          items:
            $ref: '#/components/schemas/PersonalChatResponseDto'
        hasNext:
          type: boolean
        currentPage:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    GroupMemberRequestDto:
      required:
        - personId
        - writePosts
        - writeComments
        - manageMembers
      type: object
      properties:
        personId:
          type: string
          format: uuid
        writePosts:
          type: boolean
        writeComments:
          type: boolean
        manageMembers:
          type: boolean
    GroupRequestDto:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    GroupResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    GroupMemberResponseDto:
      type: object
      properties:
        groupId:
          type: string
          format: uuid
        personId:
          type: string
          format: uuid
        writePosts:
          type: boolean
        writeComments:
          type: boolean
        manageMembers:
          type: boolean
    PageResponseDtoGroupResponseDto:
      type: object
      properties:
        page:
          type: array
          items:
            $ref: '#/components/schemas/GroupResponseDto'
        hasNext:
          type: boolean
        currentPage:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    PageResponseDtoGroupMemberResponseDto:
      type: object
      properties:
        page:
          type: array
          items:
            $ref: '#/components/schemas/GroupMemberResponseDto'
        hasNext:
          type: boolean
        currentPage:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    MessageRequestDto:
      required:
        - chatId
        - textContent
      type: object
      properties:
        textContent:
          type: string
        chatId:
          type: string
          format: uuid
    ReactionRequestDto:
      required:
        - emoji
      type: object
      properties:
        emoji:
          type: string
          enum:
            - POO
            - CLOWN
            - LIKE
    ReactionResponseDto:
      type: object
      properties:
        personId:
          type: string
          format: uuid
        emoji:
          type: string
          enum:
            - POO
            - CLOWN
            - LIKE
    MessageResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        chatId:
          type: string
          format: uuid
        authorId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        replyId:
          type: string
          format: uuid
        textContent:
          type: string
    PageResponseDtoMessageResponseDto:
      type: object
      properties:
        page:
          type: array
          items:
            $ref: '#/components/schemas/MessageResponseDto'
        hasNext:
          type: boolean
        currentPage:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    PageResponseDtoReactionResponseDto:
      type: object
      properties:
        page:
          type: array
          items:
            $ref: '#/components/schemas/ReactionResponseDto'
        hasNext:
          type: boolean
        currentPage:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32